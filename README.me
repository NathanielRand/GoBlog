Nathaniel Rand Â©2017-2018

GoBlog: A blog template built using Go.
Images, Videos, Microposts, Broadcasts

----------------------------------
ENVIRONMENT

- Cloud9 Web IDE (Ubuntu)

TECHNOLOGY

- HTML5
- CSS3
--- Materialize CSS
- JavaScript
- GO 1.9.3 linux/amd64
--- Gorilla Toolkit
- GNU bash 4.3.11 (x86_64-pc-linux-gnu)
- PostgreSQL 9.3.13
- Google App Engine

----------------------------------
PROJECT DETAILS

- Account CRUD
- Login / Logout
-- Front-end validation
-- Back-end validation
-- Cookies
-- Salt & Pepper Hashing
- Password Reset (coming soon)
- Micropost CRUD
- Image CRUD
- Video CRUD
- Broadcast CRUD (coming soon)

----------------------------------
PROJECT TODO

- New Resource: Microposts
-- Redirection after delete
- New Resource: Videos
- New Resource: Broadcasts

----------------------------------
RUN APPLICATION / CONFIGURATION

--- Run Application
1. Start PostgreSQL DB
2. Edit Environment Variables
3. Start "Fresh" dynamic-reloader


--- (Start PostgreSQL DB / Enter DB)
$   sudo service postgresql start
$   sudo -u postgres psql


--- (Edit Environment Variables / Run Fresh Reloader)
$   cd src/GoBlog
$   export PATH="$PATH:$GOPATH/bin"
$   fresh
$   (ALTERNATIVE) go run main.go


--- (Go Packages)
-- Golang
-   golang.org/x/crypto/bcrypt
-   golang.org/x/tools/refactor/rename


--- (Third-Party Packages)
-- Github
-   github.com/gorilla/mux
-   github.com/gorilla/schema
-   github.com/gorilla/csrf
-   github.com/pilu/fresh
-   github.com/pilu/config
-   github.com/lib/pq
-   github.com/jinzhu/gorm
-   github.com/jinzhu/gorm/dialects/postgres
-   github.com/howeyc/fsnotify
-   github.com/mattn/go-isatty
-   github.com/mattn/go-colorable

-- Icons
-   Social: Freepik - http://www.freepik.com


--- (Update Go)
$   sudo rm -rf /opt/go
$   wget https://dl.google.com/go/go1.9.3.linux-amd64.tar.gz
$   sudo tar -C /opt -xzf go1.9.3.linux-amd64.tar.gz
$   go version


--- Dynamic Reloading: "Fresh" Third-Party Package
$   go get github.com/pilu/fresh
-   Export environment variables (export PATH="$PATH:$GOPATH/bin")
-   Create runner.conf file
-   Start application via "fresh" command

--- Update Gcloud SDK
$   gcloud components update
-- Revert back to previous version
$   gcloud components update --version [91.0.1]

--- Production Server GCP
1. Initialize a server
2. Install PostgreSQL
    - SSH into instance
    - $ sudo apt-get update
    - $ sudo apt-get install postgresql postgresql-contrib
    - $ sudo -u postgres psql
    - $ ALTER USER postgres WITH ENCRYPTED PASSWORD 'xxxxxxx';
    - $ sudo nano /etc/postgresql/9.5/main/pg_hba.conf
        - local all postgres md5 <-- local all postgres peer
    - $ sudo service postgresql restart
    - $ psql -U postgres
    - $ CREATE DATABASE goblog_prod;
3. Install Go
    - SSH into instance
    - $ sudo curl -O https://storage.googleapis.com/golang/go1.9.linux-amd64.tar.gz
    - $ sudo tar -C /usr/local -xzf go1.9.linux-amd64.tar.gz
    - $ export PATH=$PATH:/usr/local/go/bin
    - $ cd ~
    - $ mkdir -p go/src
    - $ go version
4. Build/Setup Caddy
    - SSH into instance
    - $ cd ~/go/src
    - $ go get -u github.com/mholt/caddy
    - $ go get -u github.com/caddyserver/builds
    - $ cd ~/go/src/github.com/mholt/caddy/caddy
    - $ go run build.go -goos=linux -goarch=amd64
    - $ ./caddy
    - $ sudo cp ./caddy /usr/local/bin/
    - $ sudo nano /etc/systemd/system/caddy.service
    - $ sudo systemctl daemon-reload
    - $ sudo systemctl enable caddy.service
    - $ mkdir /root/app
    - $ sudo service caddy restart
    - $ journalctl -r
    - $ q (to exit)
    - $ sudo service caddy stop
    - $ ctrl+d (log out of instance server)
    - $ touch CaddyFile
    - Define domain and handling of incomng web requests to that domian
    

5. Create service & deploy script that builds and deploys our app and runs it